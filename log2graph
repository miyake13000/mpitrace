#!/usr/bin/env python

import pandas as pd
import matplotlib.pyplot as plt
import sys

# 第1引数がない場合は使い方を表示して終了
if len(sys.argv) < 2:
    print('Usage: log2graph [mpitrace log file]')
    sys.exit(1)

# CSVファイルの読み込み
csv_file_path = sys.argv[1]
df = pd.read_csv(csv_file_path, header=None, names=['FunctionName',
                                                    'StartRealTime',
                                                    'EndRealTime',
                                                    'StartCpuTime',
                                                    'EndCpuTime'])

# 最初の開始時間を取得
first_start_real_time = df['StartRealTime'].iloc[0]
first_start_cpu_time = df['StartCpuTime'].iloc[0]

# 全行の時間を最初の開始時間からの相対時間に変換
df['StartRealTime'] = df['StartRealTime'] - first_start_real_time
df['EndRealTime'] = df['EndRealTime'] - first_start_real_time
df['StartCpuTime'] = df['StartCpuTime'] - first_start_cpu_time
df['EndCpuTime'] = df['EndCpuTime'] - first_start_cpu_time

# 重複を削除して全関数名を取得
function_names = df['FunctionName'].unique()

# x軸，y軸の範囲を設定
x_max = df['EndRealTime'].max()
y_max = (len(function_names) + 1) * 10
plt.xlim([0, x_max])
plt.ylim([0, y_max])

# x軸のラベルを設定
plt.xlabel('Time (s)')
plt.ylabel('MPI Function Name')

# 各関数に対応する y 座標を設定
y_pos = []
for i in range(len(function_names)):
    y_pos.append((i + 1) * 10)

# 各関数ごとに水平補助線を引く
plt.hlines(y_pos, 0, x_max, "k", lw=0.5, ls=':')

# y 軸に関数名を表示
plt.yticks(y_pos, function_names)

for i in range(len(function_names)):
    # 関数名ごとにデータフレームを分割
    df_function = df[df['FunctionName'] == function_names[i]]
    df_function = df_function.reset_index(drop=True)

    # この関数の時系列をプロットする y 座標を決定する
    y_pos = (i + 1) * 10
    # plt.plot([0, x_max], [y_pos, y_pos], ls=":", lw=0.5, color="k")
    # plt.text(-1, y_pos, function_names[i], size=10, ha='right')

    # 関数の開始時間と終了時間をプロット
    for j in range(len(df_function)):
        # 実時間をプロット
        x_start = df_function['StartRealTime'].iloc[j]
        x_end = df_function['EndRealTime'].iloc[j]
        plt.plot([x_start, x_end],
                 [y_pos, y_pos],
                 ls="-",
                 lw=3,
                 color="k",
                 marker=".",
                 markersize=1)

# グラフを表示
plt.show()
